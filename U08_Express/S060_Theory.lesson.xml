<?xml version='1.0' encoding='utf-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Обработка ошибок" id="45609855-2fa4-4730-901a-5ced6e9c09d1">
  <markdown>
    Функции промежуточного обработчика для обработки ошибок определяются так же, как и другие функции промежуточной обработки, но с указанием для функции обработки ошибок не трех, а четырех аргументов: (err, req, res, next). Например:
    <code xml:space="preserve" >
        app.use(function(err, req, res, next) {
        console.error(err.stack);
        res.status(500).send('Something broke!');
        });
    </code>
    Промежуточный обработчик для обработки ошибок должен быть определен последним, после указания всех app.use() и вызовов маршрутов.
    Ответы, поступающие из функции промежуточной обработки, могут иметь любой формат.
    В Express предусмотрен встроенный обработчик ошибок, который обрабатывает любые возможные ошибки, встречающиеся в приложении. Этот стандартный обработчик ошибок добавляется в конец стека функций промежуточной обработки.
    В случае передачи ошибки в next() без обработки с помощью обработчика ошибок, такая ошибка будет обработана встроенным обработчиком ошибок.
    При вызове next() с ошибкой после начала записи ответа (например, если ошибка обнаружена во время включения ответа в поток, направляемый клиенту), стандартный обработчик ошибок Express закрывает соединение и отклоняет запрос. Поэтому при добавлении нестандартного обработчика ошибок вам потребуется делегирование в стандартные механизмы обработки ошибок в Express в случае, если заголовки уже были отправлены клиенту:
    <code xml:space="preserve" >
        function errorHandler(err, req, res, next) {
          if (res.headersSent) {
          return next(err);
          }
          res.status(500);
          res.render('error', { error: err });
          }
    </code>
  </markdown>
</slide>