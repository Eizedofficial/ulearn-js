<?xml version='1.0' encoding='utf-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Подключение к MySQL" id="66b86558-9ae6-4617-8937-1f39247a1881">
  <markdown>
    Для создания подключения применяется метод createConnection(), который в качестве параметра принимает настройки подключения и возвращает объект, представляющий подключение.
    <code xml:space="preserve" >
        const mysql = require("mysql2");
  
        const connection = mysql.createConnection({
          host: "localhost",
          user: "root",
          database: "usersdb",
          password: "пароль_от_сервера"
        });
    </code>

    Передаваемые в метод настройки конфигурации могут содержать ряд параметров. Наиболее используемые из них:

    `host` – хост, на котором запущен сервер mysql. По умолчанию имеет значение "localhost".

    `port` – номер порта, на котором запущен сервер mysql. По умолчанию имеет значение "3306".

    `user` – пользователь MySQL, который используется для подключения.

    `password` – пароль для пользователя MySQL.

    `database` – имя базы данных, к которой идет подключение. Необязательный параметр. Если он не указан, то подключение идет в целом к северу.

    `charset` – кодировка для подключения, например, по умолчанию используется "UTF8_GENERAL_CI".

    `timezone` – часовой пояс сервера MySQL. По умолчанию имеет значение "local".

    Для установки подключения используется метод `connect()` объекта connection:
    <code xml:space="preserve" >
        const mysql = require("mysql2");
  
        const connection = mysql.createConnection({
          host: "localhost",
          user: "root",
          database: "usersdb",
          password: "пароль_от_сервера"
        });
         connection.connect(function(err){
            if (err) {
              return console.error("Ошибка: " + err.message);
            }
            else{
              console.log("Подключение к серверу MySQL успешно установлено");
            }
         });
    </code>

    Метод connect() принимает функцию, параметр которой содержит ошибку, которая возникла при подключении.

    Для закрытия подключения применяется метод `end()`. Он гарантирует, что перед закрытием подключения к бд будут выполнены все оставшиеся запросы, которые не завершились к моменту вызова метода.

    Если мы не вызовем этот метод, то подключение будет оставаться активным, и приложение Node.js продолжит свою работу, пока сервер MySQL не закроет подключение.

    Если же нам надо немедленно закрыть подключение, не дожидаясь выполнения оставшихся запросов, то в этом случае можно применить метод `destroy()`.
  </markdown>
</slide>
