<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Основы роутинга" id="7f4885cc-4f7d-4aa8-97cd-10070c0b1f21">
  <markdown>
    Роутинг или маршрутизация - это логика, которая позволяет пользователю передвигаться по сайту. Маршрутизация определяет, как приложение отвечает на клиентский запрос к конкретному адресу (URI).
    Каждый маршрут может иметь одну или несколько функций обработки, которые выполняются при сопоставлении маршрута.
    Определение маршрута имеет следующую структуру:

    `app.METHOD(PATH, HANDLER)`

    Где:
    *	`app` – это экземпляр express;
    *	`METHOD` – метод запроса HTTP;
    *	`PATH` – путь на сервере;
    *	`HANDLER` – функция, выполняемая при сопоставлении маршрута.

    Есть различные методы для запросов:
    *	`router.get()` – GET запрос;
    *	`router.post()` – POST запрос;
    *	`router.put()` – PUT запрос для создания элементов, похож на POST;
    *	`router.delete()` – DELETE запрос для удаления элементов, похож на POST.

    Приведенные ниже элементарные примеры иллюстрируют способ определения простых маршрутов.
    Ответ `Hello World!` на домашней странице:
    <code xml:space="preserve" >
        app.get('/', function (req, res) {
        res.send('Hello World!');
        });
    </code>

    Ответ на запрос POST в корневом маршруте (/), на домашней странице приложения:
    <code xml:space="preserve" >
        app.post('/', function (req, res) {
        res.send('Got a POST request');
        });
    </code>

    Ответ на запрос PUT, адресованный маршруту /user:
    <code xml:space="preserve" >
        app.put('/user', function (req, res) {
        res.send('Got a PUT request at /user');
        });
    </code>

    Ответ на запрос DELETE, адресованный маршруту /user:
    <code xml:space="preserve" >
        app.delete('/user', function (req, res) {
        res.send('Got a DELETE request at /user');
        });
    </code>

    Ещё вы можете встраивать какие-то параметры благодаря знаку двоеточие, вот как это примерно будет выглядеть:
    <code xml:space="preserve" >
        app.get('/users/:userId', function (req, res) {
        res.send(req.params.userId)
        })
    </code>

    В параметре req хранится значение params, которая в свою очередь хранит переменные из URL, то есть если в строку браузере мы передадим такой URL: «http://localhost:3000/users/51/», то значение req.params.userId, будет равно «51», и, в зависимости от этих параметров, можно генерировать наш шаблон или отправлять определённые данные.
    Существуют разные обозначения в URL:

    “?” - предыдущий символ может встречаться 1 раз или отсутствовать;

    “+” - предыдущий символ может встречаться 1 и более раз;

    “*” - на месте данного символа может находиться любое количество символов;

    “()” - позволяют оформить группу символов, которые могут встречаться в запросе.
  </markdown>
</slide>
