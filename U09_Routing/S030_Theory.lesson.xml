<?xml version='1.0' encoding='utf-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Промежуточные обработчики (middleware)" id="d4b151f1-9b7b-41d9-aafe-489db184dea4">
  <markdown>
    Функции промежуточной обработки(middleware) - это функции, имеющие доступ к объекту запроса (req), объекту ответа (res) и к следующей функции промежуточной обработки в цикле “запрос-ответ” приложения. Следующая функция промежуточной обработки, как правило, обозначается переменной next.
    Функции промежуточной обработки могут выполнять следующие задачи:
    *	выполнение любого кода;
    *	внесение изменений в объекты запросов и ответов;
    *	завершение цикла “запрос-ответ”;
    *	вызов следующего промежуточного обработчика из стека.

    Если текущая функция промежуточной обработки не завершает цикл “запрос-ответ”, она должна вызвать next()для передачи управления следующей функции промежуточной обработки. В противном случае запрос зависнет.
    Ниже представлены элементы вызова функции промежуточного обработчика:
    *	метод HTTP, к которому применяется данный промежуточный обработчик;
    *	путь (маршрут), к которому применяется данный промежуточный обработчик;
    *	функция промежуточного обработчика;
    *	аргумент обратного вызова для функции промежуточного обработчика, именуемый "next" согласно стандарту;
    *	аргумент ответа HTTP, именуемый "res" согласно стандарту;
    *	аргумент запроса HTTP, именуемый "req" согласно стандарту.

    Ниже приводится простой пример промежуточного обработчика “myLogger”. Эта функция печатает слово “LOGGED” при прохождении запроса, адресованного приложению, через приложение. Данная функция промежуточного обработчика присвоена переменной с именем myLogger.
    <code xml:space="preserve" >
        var myLogger = function (req, res, next) {
        console.log('LOGGED');
        next();
        };
    </code>

    Стоит обратить внимание на вызов next() выше. Вызов этой функции активирует следующую функцию промежуточной обработки в приложении.
    Функция next() не является частью Node.js или Express API, но представляет собой третий аргумент, передаваемый в функцию промежуточного обработчика. Функция next() могла бы иметь любое имя, но, согласно стандарту, она всегда называется “next”.
    Для того чтобы загрузить функцию промежуточного обработчика вызовите app.use() с указанием соответствующей функции.
    Приведенный ниже код загружает функцию промежуточного обработчика myLogger перед маршрутом к корневому расположению (/).
    <code xml:space="preserve" >
        var express = require('express');
        var app = express();

        var myLogger = function (req, res, next) {
          console.log('LOGGED');
          next();
        };

        app.use(myLogger);

        app.get('/', function (req, res) {
          res.send('Hello World!');
        });

        app.listen(3000);
    </code>

    Каждый раз при получении запроса приложение выводит на терминал сообщение “LOGGED”.
    
    Порядок загрузки промежуточных обработчиков очень важен: функции промежуточных обработчиков, загруженные первыми, выполняются в первую очередь. Функции middleware применяются на трех уровнях в приложении (маршрута, маршрутизатора, приложения).
    
    Если myLogger загружается после маршрута к корневому расположению, запрос никогда не достигает его, и приложением не выводится сообщение “LOGGED”, поскольку обработчик маршрута корневого пути завершает цикл “запрос-ответ”.
    Промежуточный обработчик myLogger всего лишь выводит сообщение, затем передает запрос далее, следующему промежуточному обработчику в стеке, путем вызова функции next().
  </markdown>
</slide>