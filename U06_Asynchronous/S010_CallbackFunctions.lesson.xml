<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Callback-функции" id="bd07e911-5363-4b9b-940f-237c4ace9005">
  <markdown>
    До стандарта ES2015 существовал только один вариант, как сделать что-то в JS асинхронно — воспользоваться коллбеками, которые будут вызваны когда-нибудь позже. Есть много API, которые работают на коллбеках, например, слушатели событий и таймеры.
    
    Callback-функция (или обратный вызов) - это функция, переданная в другую функцию в качестве аргумента, которая затем вызывается по завершению какого-либо действия.
    
    Краткий пример:
    <code>
      function greeting(name) {
        alert('Hello ' + name);
      }

      function processUserInput(callback) {
        var name = prompt('Please enter your name.');
        callback(name);
      }

      processUserInput(greeting);
    </code>
    Выше приведён пример синхронного коллбэка, поскольку функция processUserInput выполняется синхронно.
    
    Callback-функции часто используются для продолжения выполнения кода после завершения асинхронной операции - они называются асинхронными коллбэками.
    <code>
      async function pageLoader(callback) {
        const data = await fetch('/ru/docs/Glossary/Callback_function')
        callback(data)
      }

      function onPageLoadingFinished(pageData) {
        console.log('Page was sucessfully loaded!')
        console.log('Response:')
        console.log(pageData)
      }

      pageLoader(onPageLoadingFinished)
    </code>
    Функции, принимающие в качестве аргументов другие функции или возвращающие функции в качестве результата, называют 'функциями высшего порядка'. Техника обратного вызова играет важную роль для достижения повторного использования кода.
    </markdown>
</slide>
