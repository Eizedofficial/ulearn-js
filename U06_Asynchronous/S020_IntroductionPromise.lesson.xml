<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Знакомство с Promise" id="35002d60-cf47-4ef9-94d2-b7f99d9a0bf3">
	<markdown>
		Объект **Promise** используется для отложенных и асинхронных вычислений.

		Синтаксис:
		```
		new Promise(executor);
		new Promise(function(resolve, reject) { ... });
		```
		####Параметры:

		**Executor** - объект функции с двумя аргументами 'resolve' и 'reject'. Функция executor получает оба аргумента и выполняется сразу, ещё до того как конструктор вернёт созданный объект. Первый аргумент (resolve) вызывает успешное исполнение промиса, второй (reject) отклоняет его.

		Обычно функция executor описывает выполнение какой-то асинхронной работы, по завершении которой необходимо вызвать функцию resolve или reject. **Обратите внимание**, что возвращаемое значение функции executor игнорируется.

		####Описание:

		Интерфейс Promise представляет собой обёртку для значения, неизвестного на момент создания промиса. Он позволяет обрабатывать результаты асинхронных операций так, как если бы они были синхронными: вместо конечного результата асинхронного метода возвращается своего рода обещание (дословный перевод слова «promise») получить результат в некоторый момент в будущем.

		Promise может находиться в трёх состояниях:
		*    ожидание (pending): начальное состояние, не исполнен и не отклонён
		*    исполнено (fulfilled): операция завершена успешно
		*    отклонено (rejected): операция завершена с ошибкой
		При создании промис находится в ожидании (pending), а затем может стать исполненным (fulfilled), вернув полученный результат (значение), или отклонённым (rejected), вернув причину отказа. В любом из этих случаев вызывается обработчик, прикреплённый к промису методом then. (Если в момент назначения обработчика промис уже исполнен или отклонён, обработчик всё равно будет вызван, т.е. асинхронное исполнение промиса и назначение обработчика не будет происходить в состоянии «гонки».)

		Так как методы 'Promise.prototype.then()' и 'Promise.prototype.catch()' сами возвращают промис, их можно вызывать цепочкой, создавая соединения.

		####Создание Promise:

		Объект Promise создаётся при помощи ключевого слова new и своего конструктора. Конструктор Promise принимает в качестве аргумента функцию, называемую "исполнитель" (executor function). Эта функция должна принимать две функции-колбэка в качестве параметров. Первый из них (resolve) вызывается, когда асинхронная операция завершилась успешно и вернула результат своего исполнения в виде значения. Второй колбэк (reject) вызывается, когда операция не удалась, и возвращает значение, указывающее на причину неудачи, чаще всего объект ошибки.
		
		<code>
			const myFirstPromise = new Promise((resolve, reject) => {
                // выполняется асинхронная операция, которая в итоге вызовет:
                //
                //   resolve(someValue); // успешное завершение
                // или
                //   reject("failure reason"); // неудача
           });
		</code>
		Чтобы снабдить функцию функциональностью промисов, нужно просто вернуть в ней объект Promise:
		<code>
			function myAsyncFunction(url) {
              return new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                xhr.open("GET", url);
                xhr.onload = () => resolve(xhr.responseText);
                xhr.onerror = () => reject(xhr.statusText);
                xhr.send();
              });
            }
		</code>
	</markdown>
</slide>
