<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Теория" id="bd07e911-5363-4b9b-940f-237c4ace9005">
  <markdown>
    1. [Callback](https://developer.mozilla.org/ru/docs/Словарь/функция_обратного_вызова). До стандарта ES2015
    существовал только один вариант, как сделать что-то в JS асинхронно — воспользоваться коллбеками, которые будут
    вызваны когда-нибудь позже. Есть много API, которые работают на коллбеках, например, слушатели событий и таймеры.
    2. [Promise](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise). В
    современном стандарте есть еще один инструмент асинхронности — Promise.
    3. Одно из частых использований асинхронности связано с запросами на сервер. Чтобы в нем разобраться, нужно
    сначала узнать, что такое
    [HTTP](https://ulearn.me/Course/Hackerdom/Istoriya_HTTP_5ad7c7fc-d551-416b-b6c7-f844de0b89c3). Посмотри
    все видео из раздела "протокол HTTP".
    4. Смотреть информацию о http-запросах можно во вкладке Network (сеть) инструментов разработчика в браузере.
    Подробно прочитать можно
    [в блоге Google Developers](https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#analyze).
    Статья на английском, если у тебя не очень хорошо с английским, досточно посмотреть картинки. Обязательно
    попробуй получить информацию о запросах, разберись: где видны коды ответов; как узнать, какие заголовки пришли;
    какие данные прислал сервер; какие данные были отправлены на сервер.
  </markdown>
</slide>
