<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Синхронные и асинхронные запросы" id="685f7a37-7b6b-4060-aa54-7771ba24ac8b">
	<markdown>
		Если в методе open установить параметр 'async' равным false, то запрос будет синхронным.
		
		Синхронные вызовы используются чрезвычайно редко, так как блокируют взаимодействие со страницей до окончания загрузки. Посетитель не может даже прокручивать её. Никакой JavaScript не может быть выполнен, пока синхронный вызов не завершён.
		<code>
		// Синхронный запрос
		xhr.open('GET', 'phones.json', false);
		// Отсылаем его
		xhr.send();
		// ...весь JavaScript "подвиснет", пока запрос не завершится
		</code>
		
		Если синхронный вызов занял слишком много времени, то браузер предложит закрыть «зависшую» страницу.
		
		Из-за такой блокировки получается, что нельзя отослать два запроса одновременно.
		
		Из всего вышесказанного уже должно быть понятно, что синхронные запросы используются чрезвычайно редко, а асинхронные – почти всегда.
		
		Для того, чтобы запрос стал асинхронным, укажем параметр 'async' равным true.
		
		**Изменённый JS-код:**
		<code>
		var xhr = new XMLHttpRequest();

		xhr.open('GET', 'phones.json', true);

		xhr.send(); // (1)

		xhr.onreadystatechange = function() { // (3)
		if (xhr.readyState != 4) return;

		button.innerHTML = 'Готово!';

		if (xhr.status != 200) {
		    alert(xhr.status + ': ' + xhr.statusText);
		    } 
		else {
		    alert(xhr.responseText);
		    }

		}

		button.innerHTML = 'Загружаю...'; // (2)
		button.disabled = true;
		</code>
		Если в open указан третий аргумент true (или если третьего аргумента нет), то запрос выполняется асинхронно.
	</markdown>
</slide>
