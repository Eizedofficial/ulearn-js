<?xml version='1.0' encoding='UTF-8'?>
<slide xmlns="https://ulearn.me/schema/v2" title="Основные свойства и методы XHR" id="ef31d1fa-1be1-48ce-be94-67a5f0b0264a">
	<markdown>
		#### Настроить: open
		Синтаксис:

		`xhr.open(method, URL, async, user, password)`
		Этот метод – как правило, вызывается первым после создания объекта XMLHttpRequest.

		Задаёт основные параметры запроса:
		* `method` – HTTP-метод. Как правило, используется GET либо POST, хотя доступны и более экзотические, вроде TRACE/DELETE/PUT и т.п.
		* `URL` – адрес запроса. Можно использовать не только http/https, но и другие протоколы, например ftp:// и file://.
		* `async` – если установлено в false, то запрос производится синхронно, если true – асинхронно.
		«Синхронный запрос» означает, что после вызова xhr.send() и до ответа сервера главный поток будет «заморожен»: посетитель не сможет взаимодействовать со страницей – прокручивать, нажимать на кнопки. После получения ответа выполнение продолжится со следующей строки.
		«Асинхронный запрос» означает, что браузер отправит запрос, а далее результат нужно будет получить через обработчики событий, которые мы рассмотрим далее.
		* `user, password` – логин и пароль для HTTP-авторизации, если нужны.


		#### Отослать данные: send
		Синтаксис:

		`xhr.send([body])`
		Именно этот метод открывает соединение и отправляет запрос на сервер.

		В body находится тело запроса. Не у всякого запроса есть тело, например у GET-запросов тела нет, а у POST – основные данные как раз передаются через body.


		#### Отмена: abort
		Вызов `xhr.abort()` прерывает выполнение запроса.


		#### Ответ: status, statusText, responseText
		Основные свойства, содержащие ответ сервера:
		* `status` – HTTP-код ответа: 200, 404, 403 и так далее. Может быть также равен 0, если сервер не ответил или при запросе на другой домен.
		* `statusText` – текстовое описание статуса от сервера: OK, Not Found, Forbidden и так далее.
		* `responseText` – текст ответа сервера.
	</markdown>
</slide>
