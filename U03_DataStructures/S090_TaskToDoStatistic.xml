<?xml version="1.0"?>
<slide.exercise id="ed100372-b5e5-4982-9004-f76de5a08805" title="Задача. Утилита TODO"
                xmlns="https://ulearn.me/schema/v2">
    <scoring group="exercise" passedTestsScore="10" codeReviewScore="40"/>
    <markdown>
        ###Задача сделать консольную утилиту для фронтендера.


        [Утилита](src/11_todoStatistic/archieve.zip) будет брать все файлы с расширением .js в текущей директории, находить в них все комментарии с TODO.
        Искать по ним, фильтровать, сортировать.
        Мы уже написали за тебя метод для работы с консолью и методы для чтения из файлов. Осталось написать остальное =)
        Для запуска используй команду 'node index.js' При запуске специальный код ждет команды из консоли.
        Сейчас он знает только команду exit, остальные нужно дописать тебе.


        ####Задача №1

        Сейчас метод 'processCommand' обрабатывает только команду 'exit' и завершает процесс в node.
        Научись обрабатывать еще одну команду из консоли:
        <code>
        show : показать все todo
        </code>
        Для этого получи из всех файлов все однострочные комментарии, начинающиеся с `TODO`.
        Все комментарии имеют одинаковое начало: два слеша, пробел, слово TODO капсом, снова пробел и дальше текст комментария.
        Например:

        `// TODO Переделать это!`

        Для написания метода show тебе необходимо написать метод `readAllTodos`, который построчно читает из файла и при помощи метода
        `parseTodo` формирует объект в формате

        `{кол-во восклицаний(далее - приоритет), пользователь, дата, комментарий, имя файла}`

        и выводит массив таких объектов в консоль
        Обрати внимание, ToDo может начинаться как и с новой строки, так и после строчек кода
        Возможно, тебе пригодиться метод [string.indexOf]
        Выводить нужно стандартным выводом в консоль "console.log".

        ####Задача №2

        2.В комментарии может присутствовать восклицательный знак (`!`), что означает, что это задача с высоким приоритетом.
        Научись обрабатывать команду из консоли:
        <code>
        important : показывать только todo, в которых есть восклицательный знак
        </code>

        ####Задача №3


        3.Текст в todo может быть представлен обычным текстом.
        Или же использовать специальную разметку:

        `// TODO {Имя автора}; {Дата комментария}; {текст комментария}`

        После имени и даты обязательно ставится точка с запятой, а вот пробел между ними не обязателен.
        Научись обрабатывать еще одну команду из консоли:
        <code>
        user {username} : показывать только комментарии от указанного пользователя
        </code>
        Причем имя пользователя должно быть `регистронезависимо`.
        Пример команды: `user veronika`


        ####Задача №4

        Научись обрабатывать команды
        <code>
        sort {importance | user | date} : выводит отсортированные todo
        </code>
        - Если аргумент `importance`, то сначала выводятся комментарии с восклицательными знаками, потом все остальные.
            Чем больше восклицательных знаков, тем выше приоритет и тем выше в списке этот комментарий.
        - Если аргумент `user`, то выводятся задачи сгрупированные по пользователям, а в конце безымянные.
        - Если аргумент `date`, то выводятся сначала самые новые, потом постарше, потом без дат.
        Примеры команд: `sort importance, sort user, sort date`


        ####Задача №5

        Научись обрабатывать команду
        <code>
        date {yyyy[-mm-dd]}: показывает все комментарии, созданные после переданной даты.
        </code>
        Датой может быть только год, год с месяцем (через дефис) или год с месяцем и днем.

        Примеры команд: `date 2015, date 2016-02, date 2018-03-02.`
        </markdown>

    <exercise.universal exerciseDirName="src/11_todoStatistic" noStudentZip="true">
        <checkForPlagiarism>false</checkForPlagiarism>
        <hideSolutions>true</hideSolutions>
        <hideExpectedOutput>true</hideExpectedOutput>
        <userCodeFile>task.js</userCodeFile>
        <includePathForChecker>../TestsRunner</includePathForChecker>
        <dockerImageName>js-sandbox</dockerImageName>
        <run>node docker-test-runner.mjs</run>
        <region>Task</region>
    </exercise.universal>
</slide.exercise>
